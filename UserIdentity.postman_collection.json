{
	"info": {
		"_postman_id": "462b2ea6-abf8-4cf0-a7cd-be30785c6238",
		"name": "UserIdentity",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19675852",
		"_collection_link": "https://potential-barnacle.postman.co/workspace/Personal~931a1465-e26d-496c-97f2-f62cd43331b7/collection/19675852-462b2ea6-abf8-4cf0-a7cd-be30785c6238?action=share&source=collection_link&creator=19675852"
	},
	"item": [
		{
			"name": "JWKS",
			"item": [
				{
					"name": "Get Keys",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get Keys - Status is 200\", ()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.keys).to.not.be.null;\r",
									"    pm.expect(response.keys.length).to.be.eql(1);\r",
									"    response.keys.forEach(item=>{\r",
									"        pm.expect(item.alg).to.not.be.null;\r",
									"        pm.expect(item.kty).to.not.be.null;\r",
									"        pm.expect(item.kid).to.not.be.null;\r",
									"        pm.expect(item.k).to.not.be.null;\r",
									"    });\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{user_identity_base_url}}/jwks/keys",
							"host": [
								"{{user_identity_base_url}}"
							],
							"path": [
								"jwks",
								"keys"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Register",
			"item": [
				{
					"name": "Valid Registration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful Login request - Status is 201\", ()=>{\r",
									"    pm.response.to.have.status(201);\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.userDetails).to.not.be.null;\r",
									"    const userDetails = response.userDetails;\r",
									"    pm.expect(userDetails.id).to.not.be.null;\r",
									"    pm.expect(userDetails.fullName).to.be.eql(`${pm.environment.get(\"first_name\")} ${pm.environment.get(\"last_name\")}`);    \r",
									"    pm.expect(userDetails.userName).to.be.eql(`${pm.environment.get(\"phone_number\")}`);\r",
									"    pm.expect(userDetails.email).to.be.eql(`${pm.environment.get(\"user_email\")}`);\r",
									"    pm.expect(userDetails.createdBy).to.not.be.null;\r",
									"    pm.expect(userDetails.createdAt).to.not.be.null;\r",
									"    pm.expect(userDetails.updatedBy).to.not.be.null;\r",
									"    pm.expect(userDetails.updatedAt).to.not.be.null;\r",
									"\r",
									"    pm.expect(response.userToken).to.not.be.null;\r",
									"    const userToken = response.userToken;\r",
									"    pm.expect(userToken.accessToken).to.not.be.null;\r",
									"    pm.expect(userToken.refreshToken).to.not.be.null;    \r",
									"    const accessToken = userToken.accessToken;\r",
									"    pm.expect(accessToken.token).to.not.be.null;\r",
									"    pm.expect(accessToken.expiresIn).to.not.be.null;  \r",
									"\r",
									"    pm.expect(response.editEnabled).to.not.be.null;\r",
									"    pm.expect(response.deleteEnabled).to.not.be.null;\r",
									"    pm.expect(response.requestStatus).to.be.eql(\"Request Successful\");\r",
									"    pm.expect(response.statusMessage).to.be.eql(\"Item created successfully\");\r",
									"\r",
									"    pm.environment.set(\"user_id\", response.userDetails.id);\r",
									"    pm.environment.set(\"user_access_token\", response.userToken.accessToken.token);\r",
									"    pm.environment.set(\"user_refresh_token\", response.userToken.refreshToken);\r",
									"    pm.environment.set(\"user_email\", response.userDetails.email);     \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"first_name\",pm.variables.replaceIn(\"{{$randomFirstName}}\"));\r",
									"pm.environment.set(\"last_name\", pm.variables.replaceIn(\"{{$randomLastName}}\"));\r",
									"pm.environment.set(\"phone_number\", parseInt(\"+254711\" + `${_.random(100000, 999999)}`));\r",
									"pm.environment.set(\"user_email\", pm.variables.replaceIn(\"{{$randomExampleEmail}}\"));\r",
									"pm.environment.set(\"user_password\",\"P@22W0rd\")"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"{{first_name}}\",\r\n  \"lastName\": \"{{last_name}}\",\r\n  \"username\": \"{{phone_number}}\",\r\n  \"phoneNumber\": \"{{phone_number}}\",\r\n  \"userEmail\": \"{{user_email}}\",\r\n  \"userPassword\": \"{{user_password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_identity_base_url}}/user/register",
							"host": [
								"{{user_identity_base_url}}"
							],
							"path": [
								"user",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Registration Existing Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Registration with exisiting details - Status is 400\", ()=>{\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.not.be.null;\r",
									"    const error = response.error;\r",
									"    pm.expect(error.message).to.be.eql(`A record identified with - ${pm.environment.get(\"phone_number\")} - exists`);\r",
									"    pm.expect(error.timestamp).to.not.be.null;\r",
									"\r",
									"    pm.expect(response.requestStatus).to.be.eql(\"Request Failed\");\r",
									"    pm.expect(response.statusMessage).to.be.eql(\"400 - BAD REQUEST\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"{{first_name}}\",\r\n  \"lastName\": \"{{last_name}}\",\r\n  \"username\": \"{{phone_number}}\",\r\n  \"phoneNumber\": \"{{phone_number}}\",\r\n  \"userEmail\": \"{{user_email}}\",\r\n  \"userPassword\": \"{{user_password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_identity_base_url}}/user/register",
							"host": [
								"{{user_identity_base_url}}"
							],
							"path": [
								"user",
								"register"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Login",
			"item": [
				{
					"name": "Successful Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Successful Login request - Status is 200\", ()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.userDetails).to.not.be.null;\r",
									"    const userDetails = response.userDetails;\r",
									"    pm.expect(userDetails.id).to.not.be.null;\r",
									"    pm.expect(userDetails.fullName).to.be.eql(`${pm.environment.get(\"first_name\")} ${pm.environment.get(\"last_name\")}`);    \r",
									"    pm.expect(userDetails.userName).to.be.eql(`${pm.environment.get(\"phone_number\")}`);\r",
									"    pm.expect(userDetails.email).to.be.eql(`${pm.environment.get(\"user_email\")}`);\r",
									"    pm.expect(userDetails.createdBy).to.not.be.null;\r",
									"    pm.expect(userDetails.createdAt).to.not.be.null;\r",
									"    pm.expect(userDetails.updatedBy).to.not.be.null;\r",
									"    pm.expect(userDetails.updatedAt).to.not.be.null;\r",
									"\r",
									"    pm.expect(response.userToken).to.not.be.null;\r",
									"    const userToken = response.userToken;\r",
									"    pm.expect(userToken.accessToken).to.not.be.null;\r",
									"    pm.expect(userToken.refreshToken).to.not.be.null;    \r",
									"    const accessToken = userToken.accessToken;\r",
									"    pm.expect(accessToken.token).to.not.be.null;\r",
									"    pm.expect(accessToken.expiresIn).to.not.be.null;  \r",
									"\r",
									"    pm.expect(response.editEnabled).to.not.be.null;\r",
									"    pm.expect(response.deleteEnabled).to.not.be.null;\r",
									"    pm.expect(response.requestStatus).to.be.eql(\"Request Successful\");\r",
									"    pm.expect(response.statusMessage).to.be.eql(\"Login successful\");\r",
									"\r",
									"    pm.environment.set(\"user_id\", response.userDetails.id);\r",
									"    pm.environment.set(\"user_access_token\", response.userToken.accessToken.token);\r",
									"    pm.environment.set(\"user_refresh_token\", response.userToken.refreshToken);\r",
									"    pm.environment.set(\"user_email\", response.userDetails.email);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userName\": \"{{phone_number}}\",\r\n    \"password\": \"{{user_password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_identity_base_url}}/user/login",
							"host": [
								"{{user_identity_base_url}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Invalid Login request - Status is 401\", ()=>{\r",
									"    pm.response.to.have.status(401);\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.not.be.null;\r",
									"    const error = response.error;\r",
									"    pm.expect(error.message).to.be.eql(`Provided credentials are invalid`);\r",
									"    pm.expect(error.timestamp).to.not.be.null;\r",
									"\r",
									"    pm.expect(response.requestStatus).to.be.eql(\"Request Failed\");\r",
									"    pm.expect(response.statusMessage).to.be.eql(\"401 - UNAUTHORIZED\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userName\": \"{{phone_number}}\",\r\n    \"password\": \"1*2&34Q\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_identity_base_url}}/user/login",
							"host": [
								"{{user_identity_base_url}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Reset Password",
			"item": [
				{
					"name": "Reset Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Reset Passowrd request - Status is 200\", ()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.resetPasswordDetails).to.not.be.null;\r",
									"    const resetPasswordDetails = response.resetPasswordDetails\r",
									"    pm.expect(resetPasswordDetails.emailMessage).to.not.be.null;\r",
									"\r",
									"    pm.expect(response.requestStatus).to.be.eql(\"Request Successful\");\r",
									"    pm.expect(response.statusMessage).to.be.eql(\"Password reset request successful\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userEmail\": \"{{user_email}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_identity_base_url}}/user/reset-password",
							"host": [
								"{{user_identity_base_url}}"
							],
							"path": [
								"user",
								"reset-password"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Token",
			"item": [
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Refresh Token - Status is 200\", ()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"    const response =  pm.response.json();\r",
									"     pm.expect(response.userToken).to.not.be.null;\r",
									"    const userToken = response.userToken;\r",
									"    pm.expect(userToken.accessToken).to.not.be.null;\r",
									"    pm.expect(userToken.refreshToken).to.not.be.null;    \r",
									"    const accessToken = userToken.accessToken;\r",
									"    pm.expect(accessToken.token).to.not.be.null;\r",
									"\r",
									"    pm.expect(response.editEnabled).to.not.be.null;\r",
									"    pm.expect(response.deleteEnabled).to.not.be.null;\r",
									"    pm.expect(response.requestStatus).to.be.eql(\"Request Successful\");\r",
									"    pm.expect(response.statusMessage).to.be.eql(\"Refresh token generated successfully\");\r",
									"\r",
									"    pm.environment.set(\"user_access_token\", response.userToken.accessToken.token);\r",
									"    pm.environment.set(\"user_refresh_token\", response.userToken.refreshToken);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"accessToken\": \"{{user_access_token}}\",\r\n    \"refreshToken\": \"{{user_refresh_token}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_identity_base_url}}/user/refresh-token",
							"host": [
								"{{user_identity_base_url}}"
							],
							"path": [
								"user",
								"refresh-token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User Details",
			"item": [
				{
					"name": "Get User Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get User Details - Status is 200\", ()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.user).to.not.be.null;\r",
									"    const user = response.user;\r",
									"    pm.expect(user.id).to.not.be.null;\r",
									"    pm.expect(user.fullName).to.be.eql(`${pm.environment.get(\"first_name\")} ${pm.environment.get(\"last_name\")}`);    \r",
									"    pm.expect(user.userName).to.be.eql(`${pm.environment.get(\"phone_number\")}`);\r",
									"    pm.expect(user.email).to.be.eql(`${pm.environment.get(\"user_email\")}`);\r",
									"    pm.expect(user.createdBy).to.be.eql(`${pm.environment.get(\"user_id\")}`);\r",
									"    pm.expect(user.createdAt).to.not.be.null;\r",
									"    pm.expect(user.updatedBy).to.be.eql(`${pm.environment.get(\"user_id\")}`);\r",
									"    pm.expect(user.updatedAt).to.not.be.null;\r",
									"\r",
									"    pm.expect(response.editEnabled).to.not.be.null;\r",
									"    pm.expect(response.deleteEnabled).to.not.be.null;\r",
									"    pm.expect(response.requestStatus).to.be.eql(\"Request Successful\");\r",
									"    pm.expect(response.statusMessage).to.be.eql(\"Item fetched successfully\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_access_token}}",
								"uuid": "f7cfef53-808f-4dff-b9f0-7aba5ca3ac26"
							}
						],
						"url": {
							"raw": "{{user_identity_base_url}}/user/{{user_id}}",
							"host": [
								"{{user_identity_base_url}}"
							],
							"path": [
								"user",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Non-existent User Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get Non-existent User Details - Status is 404\", ()=>{\r",
									"    pm.response.to.have.status(404);\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.not.be.null;\r",
									"    const error = response.error;\r",
									"    pm.expect(error.message).to.be.eql(`No record exists for the provided identifier - ${pm.environment.get(\"default_guid\")}`);\r",
									"    pm.expect(error.timestamp).to.not.be.null;\r",
									"\r",
									"    pm.expect(response.requestStatus).to.be.eql(\"Request Failed\");\r",
									"    pm.expect(response.statusMessage).to.be.eql(\"404 - NOT FOUND\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_access_token}}",
								"uuid": "77c09105-5d4f-4249-a6bb-2d7c1e3f25ec"
							}
						],
						"url": {
							"raw": "{{user_identity_base_url}}/user/{{default_guid}}",
							"host": [
								"{{user_identity_base_url}}"
							],
							"path": [
								"user",
								"{{default_guid}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Roles",
			"item": [
				{
					"name": "Get User Roles",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_access_token}}",
								"uuid": "922a62b6-3cf6-4061-b3ef-28cf7883d0bd"
							}
						],
						"url": {
							"raw": "{{user_identity_base_url}}/role/user/{{user_id}}",
							"host": [
								"{{user_identity_base_url}}"
							],
							"path": [
								"role",
								"user",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_access_token}}",
								"uuid": "49416fcc-6b8c-435e-bc42-9939881596b4"
							}
						],
						"url": {
							"raw": "{{user_identity_base_url}}/role",
							"host": [
								"{{user_identity_base_url}}"
							],
							"path": [
								"role"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Role",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_access_token}}",
								"uuid": "58cfc713-174e-48e7-88c1-02d1806ac3cb"
							}
						],
						"url": {
							"raw": "{{user_identity_base_url}}/role/{{user_role_id}}",
							"host": [
								"{{user_identity_base_url}}"
							],
							"path": [
								"role",
								"{{user_role_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Role",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_access_token}}",
								"uuid": "15b6626a-a767-46dc-80ec-22a89ab9436e"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roleId\":\"{{user_role_id}}\",\r\n    \"roleName\": \"Administrator\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_identity_base_url}}/role",
							"host": [
								"{{user_identity_base_url}}"
							],
							"path": [
								"role"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Role",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_access_token}}",
								"uuid": "f3b7b2fb-5500-482c-bde0-788cec106907"
							}
						],
						"url": {
							"raw": "{{user_identity_base_url}}/role/{{user_role_id}}",
							"host": [
								"{{user_identity_base_url}}"
							],
							"path": [
								"role",
								"{{user_role_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User Role",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_access_token}}",
								"uuid": "0034e8c7-5900-45d2-ab41-602d69a7d201"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\":\"{{user_id}}\",\r\n    \"roleId\": \"{{user_role_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_identity_base_url}}/role/user",
							"host": [
								"{{user_identity_base_url}}"
							],
							"path": [
								"role",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_access_token}}",
								"uuid": "ebe9e83b-331a-4f84-956d-7662a847afb1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roleName\": \"Test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_identity_base_url}}/role",
							"host": [
								"{{user_identity_base_url}}"
							],
							"path": [
								"role"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Role Claim",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_access_token}}",
								"uuid": "598fef2c-a598-4d91-a796-993896527d55"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roleId\": \"{{user_role_id}}\",\r\n    \"resource\": \"itemtype\",\r\n    \"action\": \"download\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_identity_base_url}}/role/claim",
							"host": [
								"{{user_identity_base_url}}"
							],
							"path": [
								"role",
								"claim"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Role Claim",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_access_token}}",
								"uuid": "44c99587-2ef1-484e-b5f6-f975984b1409"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roleId\": \"{{user_role_id}}\",\r\n    \"resource\": \"role\",\r\n    \"action\": \"create\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_identity_base_url}}/role/claim",
							"host": [
								"{{user_identity_base_url}}"
							],
							"path": [
								"role",
								"claim"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Role Claim",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_access_token}}",
								"uuid": "797fca0f-2ca2-47ef-bf04-fc22b5b13fc1"
							}
						],
						"url": {
							"raw": "{{user_identity_base_url}}/role/claim/{{user_role_id}}",
							"host": [
								"{{user_identity_base_url}}"
							],
							"path": [
								"role",
								"claim",
								"{{user_role_id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}